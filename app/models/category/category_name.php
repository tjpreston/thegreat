<?php

App::import('Sanitize');

/**
 * Category Name
 * 
 */
class CategoryName extends AppModel
{
	/**
	 * Detailed list of belongsTo associations.
	 *
	 * @var array
	 * @access public
	 */
	public $belongsTo = array('Category', 'Language');
	
	/**
	 * List of validation rules. 
	 *
	 * @var array
	 * @access public
	 */
	public $validate = array(
		'name' => array(
			'rule' => 'notEmpty',
			'required' => true,
			'allowEmpty' => false,
			'message' => 'Category name missing'
		),
		'url' => array(
			'rule' => 'categoryUrlIsUnique',
			'required' => true,
			'allowEmpty' => false,
			'message' => 'URL generated from category name missing / un-unique / invalid'
		)
	);
	
	/**
	 * Called during save operations, before validation. Please note that custom
	 * validation rules can be defined in $validate.
	 *
	 * @return boolean True if validate operation should continue, false to abort
	 * @param $options array Options passed from model::save(), see $options of model::save().
	 * @access public
	 */
	public function beforeValidate()
	{
		if (!empty($this->data['CategoryName']['name']))
		{
			$this->data['CategoryName']['url'] = Inflector::slug(strtolower($this->data['CategoryName']['name']), '-');
		}
		
		return true;
		
	}

	public function afterSave($created){
		$this->data = $this->read();

		$savingLangID = $this->data['CategoryName']['language_id'];
		
		$path = $this->Category->getpath($this->data['CategoryName']['category_id'], null, 1);	
		
		// Re-index categoryName by language_id
		foreach ($path as $k => $cat)
		{
			$catNames = $cat['CategoryName'];
			$path[$k]['CategoryName'] = array();
			
			foreach ($catNames as $catName)
			{
				$langID = $catName['language_id'];
				$path[$k]['CategoryName'][$langID] = $catName;
			}
		}
		
		$fullUrl = '/';
		foreach ($path as $k => $cat)
		{
			if (!empty($cat['CategoryName'][$savingLangID]['url']))
			{
				$fullUrl .= $cat['CategoryName'][$savingLangID]['url'] . '/';
			}
		}
		
		// Add full category url to data
		$this->data['CategoryName']['full_url'] = substr($fullUrl, 0, -1);

		$this->save($this->data, array('callbacks' => false));
		
		return true;
	}
	
	/**
	 * Check category url (generated by category name) is unique to language and parent.
	 * 
	 * @return bool
	 * @access public
	 */
	public function categoryUrlIsUnique()
	{
		$url = $this->data['CategoryName']['url'];
		
		if (in_array($url, Configure::read('Catalog.reserved_url_words')))
		{
			return false;
		}
		
		$this->Category->unbindModel(array('hasAndBelongsToMany' => array('Product')), false);
		$category = $this->Category->findById($this->data['CategoryName']['category_id']);
		
		$conditions = array(
			'Category.parent_id' => $category['Category']['parent_id'],
			'CategoryName.language_id' => $this->data['CategoryName']['language_id'],
			'CategoryName.url' => $url			
		);
		
		if (!empty($this->data['CategoryName']['id']))
		{
			$conditions['CategoryName.id !='] = $this->data['CategoryName']['id'];
		}
		
		$record = $this->find('first', array('conditions' => $conditions));
		
		if (!empty($record))
		{
			return false;
		}
		
		return true;
		
	}
	
	/**
	 * Get category names
	 * 
	 * @TODO abstract this
	 * @param int $categoryID
	 * @return array $descriptions
	 * @access public
	 */
	public function getNames($categoryID)
	{
		$records = $this->find('all', array(
			'conditions' => array('CategoryName.category_id' => $categoryID),
			'recursive' => -1
		));
		
		$names = array();
		
		foreach ($records as $k => $record)
		{
			$languageID = $record['CategoryName']['language_id'];
			$names[$languageID] = $record['CategoryName'];
		}
		
		return $names;
		
	}
	
}
